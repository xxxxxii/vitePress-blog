import { createTransformerFactory } from 'shikiji-twoslash/core';
import { createTwoslasher } from 'twoslash-vue';
import { rendererRich } from 'shikiji-twoslash';
export { defaultHoverInfoProcessor } from 'shikiji-twoslash';
import { gfmFromMarkdown } from 'mdast-util-gfm';
import { fromMarkdown } from 'mdast-util-from-markdown';
import { toHast, defaultHandlers } from 'mdast-util-to-hast';

function rendererFloatingVue(options = {}) {
  const hoverBasicProps = {
    "class": "twoslash-hover",
    "popper-class": "vp-code shiki floating-vue-twoslash vp-copy-ignore",
    "placement": "bottom-start",
    "theme": "twoslash",
    ":arrow-padding": "8",
    ":auto-boundary-max-size": "true"
  };
  const hoverPresistedProps = {
    ...hoverBasicProps,
    ":shown": "true",
    ":triggers": '["click"]',
    ":popper-triggers": '["click"]',
    ":auto-hide": "false"
  };
  function compose(parts) {
    return [
      {
        type: "element",
        tagName: "span",
        properties: {},
        children: [parts.token]
      },
      {
        type: "element",
        tagName: "template",
        properties: {
          "v-slot:popper": "{}"
        },
        content: {
          type: "root",
          children: [parts.popup]
        },
        children: []
      }
    ];
  }
  const rich = rendererRich({
    classExtra: "vp-copy-ignore",
    ...options,
    renderMarkdown,
    renderMarkdownInline,
    hast: {
      hoverToken: {
        tagName: "v-menu",
        properties: hoverBasicProps
      },
      hoverCompose: compose,
      queryToken: {
        tagName: "v-menu",
        properties: hoverPresistedProps
      },
      queryCompose: compose,
      popupDocs: {
        class: "twoslash-popup-docs vp-doc"
      },
      popupDocsTags: {
        class: "twoslash-popup-docs twoslash-popup-docs-tags vp-doc"
      },
      completionCompose({ popup, cursor }) {
        return [
          {
            type: "element",
            tagName: "v-menu",
            properties: {
              "popper-class": "vp-code shiki floating-vue-twoslash-compeltion vp-copy-ignore",
              "placement": "bottom-start",
              "theme": "twoslash",
              ":distance": "0",
              ":arrow-overflow": "true",
              ":auto-boundary-max-size": "true",
              ":shown": "true",
              ":triggers": '["click"]',
              ":popper-triggers": '["click"]',
              ":auto-hide": "false"
            },
            children: [
              cursor,
              {
                type: "element",
                tagName: "template",
                properties: {
                  "v-slot:popper": "{}"
                },
                content: {
                  type: "root",
                  children: [popup]
                }
              }
            ]
          }
        ];
      }
    }
  });
  return rich;
}
function renderMarkdown(md) {
  const mdast = fromMarkdown(md, { mdastExtensions: [gfmFromMarkdown()] });
  return toHast(
    mdast,
    {
      handlers: {
        code: (state, node) => {
          const lang = node.lang || "";
          if (lang) {
            return this.codeToHast(
              node.value,
              {
                ...this.options,
                transformers: [],
                lang
              }
            ).children[0];
          }
          return defaultHandlers.code(state, node);
        }
      }
    }
  ).children;
}
function renderMarkdownInline(md) {
  const children = renderMarkdown.call(
    this,
    md.replace(/{@link ([^}]*)}/g, "$1")
    // replace jsdoc links
  );
  if (children.length === 1 && children[0].type === "element" && children[0].tagName === "p")
    return children[0].children;
  return children;
}

function transformerTwoslash(options = {}) {
  const twoslash = createTransformerFactory(
    createTwoslasher()
  )({
    langs: ["ts", "tsx", "js", "jsx", "json", "vue"],
    explicitTrigger: true,
    renderer: rendererFloatingVue(),
    ...options
  });
  return {
    ...twoslash,
    name: "vitepress-plugin-twoslash",
    preprocess(code, options2) {
      const cleanup = options2.transformers?.find((i) => i.name === "vitepress:clean-up");
      if (cleanup)
        options2.transformers?.splice(options2.transformers.indexOf(cleanup), 1);
      if (options2.meta?.__raw?.includes("twoslash")) {
        const vPre = options2.transformers?.find((i) => i.name === "vitepress:v-pre");
        if (vPre)
          options2.transformers?.splice(options2.transformers.indexOf(vPre), 1);
      }
      return twoslash.preprocess.call(this, code, options2);
    },
    postprocess(html) {
      if (this.meta.twoslash)
        return html.replace(/{/g, "&#123;");
    }
  };
}

export { rendererFloatingVue, transformerTwoslash };
